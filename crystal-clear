/*_____________________________
 
 *Crystal unclear*
 
 Crystal-based music software
 
 Marcela Antipan Olate
 Bremen 07.04.2021
 
 _______________________________*/

// LIBRARIES
import grafica.*;
import processing.serial.*;
import wellen.*; 



// filter
final Filter mFilter = new Filter();



ToneEngineInternal mToneEngine;

// WELLEN BEAT VARIABLES
int mBeatCount;
BeatDSP mBeat;


// timer
long readTimer;
long readInterval;


// delay
final float[] mDelayBuffer = new float[4096];

final int mDelayOffset = 512;

final float mDecay = 0.9f;

final float mMix = 0.7f;
int mDelayID = 0;


// CRYSTAL VALUE
long val;

// PLOT VARIABLES
GPlot plot;
int numReadings = 5;
long[] readings = new long[numReadings];
int readIndex = 0;              // the index of the current reading
long total = 0;                  // the running total
long average = 0;                // the 
int i = 0; // variable that changes for point calculation
int points = 450; // number of points to display at a time
int totalPoints = 500; // number of points on x axis
long previousMillis = 0;
int duration = 20;


// SERIAL

Serial myPort; // Create object from Serial class

void setup() {
  frameRate(120);
  // set size of the window
  size (900, 450);

  readInterval = 200;
  readTimer = 0;

  // WELLEN MELODIA
  mToneEngine = Tone.start(Wellen.TONE_ENGINE_INTERNAL_WITH_NO_OUTPUT);
  for (int i = 0; i < Tone.instruments().size(); i++) {
    final float mPan = 2.0f * i / Tone.instruments().size() - 1.0f;
    Tone.instruments().get(i).set_pan(mPan);
  }




  // WELLEN_BEAT
  mBeat = BeatDSP.start(this); /* create beat before `DSP.start` */
  DSP.start(this); /* DSP is only used to create beat events */



  // filters
  mFilter.set_mode(Wellen.FILTER_MODE_HIGHPASS);






  // PLOT_set up serial connection 
  String portName = Serial.list()[7];
  println(portName);
  myPort = new Serial(this, portName, 115200);

  // PLOT_initialize all the readings to 0:
  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }
  setupPlot();

  delay(2000);
}

void setupPlot() {
  // initialise graph points object
  GPointsArray points1 = new GPointsArray(points);

  // calculate initial display points
  for (i = 0; i < points; i++) {
    points1.add(i, 0);
  }

  // Create the PLOT
  plot = new GPlot(this);
  plot.setPos(25, 25); // set the position of to left corner of plot
  plot.setDim(750, 300); // set plot size

  // Set the plot limits (this will fix them)
  plot.setXLim(0, totalPoints); // set x limits
  plot.setYLim(0, 1024); // set y limits

  // Set the plot title and the axis labels
  plot.setTitleText("Read Crystal "); // set plot title
  plot.getXAxis().setAxisLabelText("x axis"); // set x axis label
  plot.getYAxis().setAxisLabelText("Power"); // set y axis label

  // Add the two set of points to the plot
  plot.setPoints(points1);

  plot.setPointColor(color(0, 200, 200));
}






void draw() {
  // set window background
  background(150);

  drawPlot();


  mFilter.set_frequency(map(val, 0, 1200, 1.0f, Wellen.DEFAULT_SAMPLING_RATE * 0.8f));
  mFilter.set_resonance(map(val, 1200, 0, 0.0f, 0.9f));

  readTimer++;

  if (readTimer > readInterval) {
    readTimer = 0;
  }




  // WELLEN BEATS
  mBeat.set_bpm(map(val, 0, 800, 25, 150));
  fill(0);
  ellipse(width * 0.5f, height * 0.5f, Tone.is_playing() ? 100 : 5, Tone.is_playing() ? 100 : 5);
}

void audioblock(float[] pOutputSignal) {
  mToneEngine.audioblock(pOutputSignal); /* populate buffer with samples from tone engine */

  for (int i = 0; i < pOutputSignal.length; i++) {
    mBeat.tick();

    mDelayID++;
    mDelayID %= mDelayBuffer.length;
    int mOffsetID = mDelayID + mDelayOffset;
    mOffsetID %= mDelayBuffer.length;
    pOutputSignal[i] = (pOutputSignal[i] * (1.0f - mMix) + mDelayBuffer[mOffsetID] * mMix);
    mDelayBuffer[mDelayID] = mFilter.process(pOutputSignal[i]) * mDecay;
    
  }
}

void beat(int pBeatCount) {


  mBeatCount = pBeatCount;
  //int mNote = 45 + (int) random(0, 12);
  //Tone.note_on(mNote, 100, 0.1f);


  int mInstrument = (int) map(val, 0, 500, 0, 3);
  Tone.instrument(mInstrument);

  if (Tone.is_playing()) {
    Tone.note_off();
  } else {
    final int mVelocity = (int) map(val, 50, 1024, 10, 1);
    Tone.note_on(Scale.get_note(Scale.id((int)random(1, 17)), Note.frequency_to_note((int) map(val, 0, 500, 50, 80)), mInstrument), mVelocity);
  }
}









// PLOT THINGS

void drawPlot() {
  // draw the plot
  plot.beginDraw();
  plot.drawBackground();
  plot.drawBox();
  plot.drawXAxis();
  plot.drawYAxis();
  plot.drawTopAxis();
  plot.drawRightAxis();
  plot.drawTitle();
  plot.getMainLayer().drawPoints();
  plot.endDraw();

  // check if i has exceeded the plot size
  if (i > totalPoints) {
    i=0; // reset to zero if it has
  }

  // get new value from serial port
  // if ( millis() > previousMillis + duration) { // If data is available,

  val = getValue(); // read it and store it in val
  // Add the point at the end of the array
  i++;
  plot.addPoint(i, val);

  // Remove the first point
  plot.removePoint(0);

  previousMillis = previousMillis + duration;
  // }
}


long getValue() {
  String tempVal = "100";
  if ( myPort.available() > 0) {  // If data is available,
    tempVal = myPort.readStringUntil('\n');         // read it and store it in val
  }
  if (tempVal == "" || tempVal == null || tempVal.trim() == "") {
    return 0;
  };
  // subtract the last reading:
  total = total - readings[readIndex];
  // read from the sensor:
  try {
    readings[readIndex] = Long.parseLong(tempVal.trim());
  }
  catch(NumberFormatException nFE) {
    println("Not an Integer");
  }
  // add the reading to the total:
  total = total + readings[readIndex];
  // advance to the next position in the array:
  readIndex = readIndex + 1;

  // if we're at the end of the array...
  if (readIndex >= numReadings) {
    // ...wrap around to the beginning:
    readIndex = 0;
  }

  // calculate the average:
  average = total / numReadings;

  return average;
}
